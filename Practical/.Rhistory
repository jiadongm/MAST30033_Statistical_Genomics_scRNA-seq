Nbs <- 20 # number of b values
(bseq <- round(exp(seq(log(b1), log(b2), length.out = 20)))) # b values, on log scale
(bseq <- round(exp(seq(log(b1), log(b2), length.out = 20)))) # b values, on log scale
modelIdx <- 2
if(modelIdx == 1){
b1 <- 10 # smallest b
b2 <- 1000 # largest b
} else if (modelIdx == 2){
b1 <- 10
b2 <- 600
} else if (modelIdx == 3){
b1 <- 20
b2 <- 2000
} else if (modelIdx == 4){
b1 <- 10
b2 <- 400
}
Nbs <- 20 # number of b values
(bseq <- round(exp(seq(log(b1), log(b2), length.out = 20)))) # b values, on log scale
modelIdx <- 3
if(modelIdx == 1){
b1 <- 10 # smallest b
b2 <- 1000 # largest b
} else if (modelIdx == 2){
b1 <- 10
b2 <- 600
} else if (modelIdx == 3){
b1 <- 20
b2 <- 2000
} else if (modelIdx == 4){
b1 <- 10
b2 <- 400
}
Nbs <- 20 # number of b values
(bseq <- round(exp(seq(log(b1), log(b2), length.out = 20)))) # b values, on log scale
modelIdx <- 4
if(modelIdx == 1){
b1 <- 10 # smallest b
b2 <- 1000 # largest b
} else if (modelIdx == 2){
b1 <- 10
b2 <- 600
} else if (modelIdx == 3){
b1 <- 20
b2 <- 2000
} else if (modelIdx == 4){
b1 <- 10
b2 <- 400
}
Nbs <- 20 # number of b values
(bseq <- round(exp(seq(log(b1), log(b2), length.out = 20)))) # b values, on log scale
BiocManager::install("SingleR")
BiocManager::install("celldex")
install.packages("conquer")
remove.packages("conquer")
install.packages("conquer")
BiocManager::install("scRNAseq")
library(celldex)
library(scRNAseq)
library(SingleR)
rm(list=ls()); gc()
## SingleR
# Reference
# reference <- HumanPrimaryCellAtlasData()
reference <- NovershternHematopoieticData()
# Query
query <- GrunHSCData()
reference
query
reference$label.main
table(reference$label.main)
table(reference$label.fine)
table(reference$label.ont)
query$sample
colData(query)
View(query)
?GrunHSCData
?NovershternHematopoieticData
library(scRNAseq)
# Query
query <- BunisHSPCData()
query
colData(query)
query@metadata
query <- readRDS('~/Dropbox/Research projects/Sincast2.0/data/singleR/HSPCs.rds')
query$seurat_clusters
query@meta.data$orig.ident
query@meta.data$cluster_max
## SingleR
# Reference
reference <- HumanPrimaryCellAtlasData()
reference$label.main
table(reference$label.main)
# Query
# query <- BunisHSPCData()
query <- BacherTCellData
# Query
# query <- BunisHSPCData()
query <- BacherTCellData()
# Query
query <- BunisHSPCData()
query$Sample
colData(query)
table(query$labels)
query@int_colData$altExps
query@metadata$
g
query@metadata
query <- BacherTCellData()
install.packages("exactextractr")
devtools::install_github("immunedynamics/spectre")
library(Spectre)
installr::updateR()
??winDialog
library(utils)
installr::updateR()
library(installr)
remove.packages("installr")
mixOmics::rgcca
?mixOmics::block.pls
install.packages("RGCCA")
devtools::install_github("GreenleafLab/ArchR", ref="master", repos = BiocManager::repositories())
ArchR::installExtraPackages()
?SingleR::combineRecomputedResults
?SingleR::plotDeltaDistribution
?SingleR::plotScoreHeatmap
SingleR::plotScoreHeatmap
SingleR:::.plot_score_heatmap
SingleR:::.trim_normalize_reorder_scores
SingleR:::.trim_byLabel_and_normalize_scores
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
summary(lm.D9)
?scran::calculateSumFactors
library(scuttle)
sce <- mockSCE(ncells=500)
# Computing the size factors.
sce <- computePooledFactors(sce)
head(sizeFactors(sce))
plot(librarySizeFactors(sce), sizeFactors(sce), log="xy")
?Seurat::RunUMAP
## Set working directory
setwd("~/Documents/GitHub/BINF90004_SingleCell/Practical")
## Load necessary packages & functions
source("loadPkgs.R")
source("Viz.R")
## Install and load data
# Install data (only need to install once)
if(F){
# See what datasets have been installed
AvailableData()
# Install a pbmc dataset
InstallData("pbmc3k")
}
# Update old Seurat obj after updating Seurat pkg
pbmc3k <- UpdateSeuratObject(object = pbmc3k)
## Structure of Seurat object
pbmc3k
## QC (quality control)
# Calculate proportions of mitochondria gene expression
pbmc3k[["percent.mt"]] <- PercentageFeatureSet(pbmc3k, pattern = "^MT-")
feat2keep <- rownames(pbmc3k)[rowMeans(pbmc3k[["RNA"]]$counts == 0) < 1]
# Keep genes with:
#   - Number of genes being expressed larger than 200 but smaller than 2500
#     -- These values are not 'magic numbers'. They should vary for different datasets
#     -- The reason why don't want cells having too many genes expressed is because these 'cells' might
#        not be single cells. They might be eg doublets.
#   - Less than 5% mitochondria gene expression
pbmc3k <- subset(pbmc3k,
subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5,
features = feat2keep)
## Distribution of library size
libSizes <- pbmc3k[["RNA"]]$counts %>% colSums()
plot_dat <- data.frame(libSizes = libSizes)
plot_dat %>%
ggplot(aes(x = libSizes)) +
geom_density(bw = "SJ") +
geom_point(aes(y = 0), alpha = 0.2, shape = 3)
### Normalisation ----------------------------------------------------------------
## Shifted log (see lecture notes for explanations)
pbmc3k <- NormalizeData(pbmc3k, normalization.method = "LogNormalize", scale.factor = 1)
# Compare to step-by-step log-norm, they should give you the same result
if(F){
temp <- pbmc3k[["RNA"]]$counts %>% as.matrix()
temp <- t(t(temp)/colSums(temp))
temp <- log(temp + 1) %>% as.sparse()
temp[1:10,1:20]
pbmc3k[["RNA"]]$data[1:10, 1:20]
}
## Scran normalisation
# Convert Seurat obj to sce (scran works with sce objects only)
pbmc_sce <- as.SingleCellExperiment(pbmc3k)
# Since the clustering step of scran normalisation may result in slightly different clusters each time,
# we set the random seed.
set.seed(5202056)
clust_scran <- quickCluster(pbmc_sce)
table(clust_scran)
pbmc_sce <- computeSumFactors(pbmc_sce, cluster=clust_scran)
summary(pbmc_sce$sizeFactor)
pbmc_sce <- logNormCounts(pbmc_sce)
### Dimension reduction --------------------------------------------------
## PCA using svds
dat <- assay(pbmc_sce, "logcounts") %>%
as.matrix() %>%
t() %>%
scale(center = T, scale = F)
svd_res <- svds(dat, k = 50)
## How to get the scree plot?
foo <- matrix(rnorm(100), 20)
## How to get the scree plot?
foo <- matrix(rnorm(100), 20)
fullSVD <- svd(foo)
fullSVD$d
totSV <- fulSVD$d %>% sum()
totSV <- fullSVD$d %>% sum()
totSV <- fullSVD$d^2 %>% sum()
colVars(foo)
foo_cent <- scale(foo, center = T, scale = F)
colSums(foo_cent^2)
colSums(foo_cent^2)/10
colSums(foo_cent^2)/20
totSV
colSums(foo_cent^2)
colSums(foo_cent^2) %>% sum()
tcrossprod(foo_cent)
tcrossprod(foo_cent) %>% norm(type="F")
tcrossprod(foo_cent) %>% diag()
tcrossprod(foo_cent) %>% diag() %>% sum()
# Estiamte the total variance
totVar <- colSums(foo_cent^2) %>% sum()
# Estiamte the total variance
totVar <- sum(foo_cent^2)
totVar
dat
# Estiamte the total variance
totVar <- sum(dat^2)
# The variances explained by each component
svd_res$d^2/totVar
# The variances explained by each component
svd_res$d^2/totVar %>% plot()
# The variances explained by each component
(svd_res$d^2/totVar) %>% plot()
fullEigen <- eigen(tcrossprod(foo))
fullEigen$values
fullEigen$values^2 %>% sum()
fullEigen <- eigen(crossprod(foo))
fullEigen$values^2 %>% sum()
fullEigen$values
(totSV <- fullSVD$d^2 %>% sum())
## How to get the scree plot?
foo <- matrix(rnorm(100), 20)
fullSVD <- svd(foo)
(totSV <- fullSVD$d^2 %>% sum())
foo_cent <- scale(foo, center = T, scale = F)
colSums(foo_cent^2) %>% sum()
tcrossprod(foo_cent) %>% diag() %>% sum()
fullEigen <- eigen(crossprod(foo))
fullEigen$values^2 %>% sum()
fullEigen$values %>% sum()
foo <- matrix(rnorm(100), 20)
fullSVD <- svd(foo)
(totSV <- fullSVD$d^2 %>% sum())
foo_cent <- scale(foo, center = T, scale = F)
colSums(foo_cent^2) %>% sum()
tcrossprod(foo_cent) %>% diag() %>% sum()
fullEigen <- eigen(crossprod(foo))
fullEigen$values %>% sum()
## How to get the scree plot?
foo <- matrix(rnorm(100), 20)
fullSVD <- svd(foo)
(totSV <- fullSVD$d^2 %>% sum())
foo_cent <- scale(foo, center = T, scale = F)
colSums(foo_cent^2) %>% sum()
tcrossprod(foo_cent) %>% diag() %>% sum()
# Estiamte the total variance
totVar <- sum(dat^2)
# The variances explained by each component
(svd_res$d^2/totVar) %>% plot()
svd_res$d^2/totVar
# UMAP
umap_res <- umap(pc_score %>% as.data.frame() %>% select(comp1:comp10))
### Dimension reduction --------------------------------------------------
## PCA using svds
dat <- assay(pbmc_sce, "logcounts") %>%
as.matrix() %>%
t() %>%
scale(center = T, scale = F)
svd_res <- svds(dat, k = 50)
pc_score <-  svd_res$u %*% diag(svd_res$d)
pc_load <- svd_res$v
dimnames(pc_score) <- list(rownames(dat), paste0("comp", 1:ncol(pc_score)))
dimnames(pc_load) <- list(colnames(dat), paste0("comp", 1:ncol(pc_load)))
pc_score %>%
as.data.frame() %>%
mutate(labs = pbmc_sce$seurat_annotations) %>%
ggplot(aes(x = comp1, y = comp2)) +
geom_point(aes(colour = labs))
## How to get the scree plot?
# Estiamte the total variance
totVar <- sum(dat^2)
# The variances explained by each component (is 10 PC enough? they only explained a small proportion of total variance,
# which is very typical for scRNA-seq data.)
(svd_res$d^2/totVar) %>% plot()
# UMAP
umap_res <- umap(pc_score %>% as.data.frame() %>% select(comp1:comp10))
umap_score <- umap_res$layout
colnames(umap_score) <- paste0("comp", 1:ncol(umap_score))
p <-
umap_score %>%
as.data.frame() %>%
mutate(labs = pbmc_sce$seurat_annotations) %>%
ggplot(aes(x = comp1, y = comp2)) +
geom_point(aes(colour = labs))
p
p +
scale_y_continuous(limits = c(-10, 11))
## Set working directory
setwd("~/BINF90004_SingleCell/Practical")
## Set working directory
setwd("~/Documents/GitHub/BINF90004_SingleCell/Practical")
## Set working directory
setwd("~/Documents/GitHub/BINF90004_SingleCell/Practical")
## Load necessary packages & functions
source("loadPkgs.R")
source("Viz.R")
## Install and load data
# Install data (only need to install once)
if(F){
AvailableData()
InstallData("bmcite")
}
# Update old Seurat obj after updating Seurat pkg
bmmc <- UpdateSeuratObject(object = bmcite)
InstallData("bmcite")
# Update old Seurat obj after updating Seurat pkg
bmmc <- UpdateSeuratObject(object = bmcite)
# Subset 10% of cells to reduce computation
table(bmmc$celltype.l2)
celltypes <- bmmc$celltype.l2 %>% unique()
toKeepIdx <- c()
set.seed(9048)
for(i in 1:length(celltypes)){
ctype <- celltypes[i]
idx <- which(bmmc$celltype.l2 == ctype)
keepHowMany <- max(round(length(idx)*0.1), 1)
idx <- sample(idx, keepHowMany)
toKeepIdx <- c(toKeepIdx, idx)
}
bmmc <- bmmc[,toKeepIdx]
# Simple QC (only delete genes with zero expression in all cells)
feat2keep <- rownames(bmmc)[rowMeans(bmmc[["RNA"]]$counts == 0) < 1]
bmmc <- bmmc[feat2keep,]
# Convert Seurat obj to sce
bmmc <- SingleCellExperiment(
list(counts = bmmc[["RNA"]]$counts),
colData = bmmc@meta.data
)
# Scran norm
set.seed(5202056)
bmmc <- computeSumFactors(bmmc, cluster=quickCluster(bmmc))
bmmc <- logNormCounts(bmmc)
### Dimension reduction --------------------------------------------------
# PCA using svds
dat <- assay(bmmc, "logcounts") %>%
as.matrix() %>%
t() %>%
scale(center = T, scale = F)
svd_res <- svds(dat, k = 50)
pc_score <-  svd_res$u %*% diag(svd_res$d)
pc_load <- svd_res$v
dimnames(pc_score) <- list(rownames(dat), paste0("comp", 1:ncol(pc_score)))
dimnames(pc_load) <- list(colnames(dat), paste0("comp", 1:ncol(pc_load)))
# Scree plot
totVar <- sum(dat^2)
(svd_res$d^2/totVar) %>% plot()
# UMAP
umap_res <- umap(pc_score %>% as.data.frame() %>% select(comp1:comp50))
umap_score <- umap_res$layout
colnames(umap_score) <- paste0("comp", 1:ncol(umap_score))
p1 <-
pc_score %>%
as.data.frame() %>%
mutate(labs = bmmc$celltype.l2) %>%
ggplot(aes(x = comp1, y = comp2)) +
geom_point(aes(colour = labs), alpha = 0.4, stroke = NA, size = 3)
p2 <-
umap_score %>%
as.data.frame() %>%
mutate(labs = bmmc$celltype.l2) %>%
ggplot(aes(x = comp1, y = comp2)) +
geom_point(aes(colour = labs), alpha = 0.4, stroke = NA, size = 3)
ggarrange(p1, p2, common.legend = T)
# Look at specific cell types
plot_dat %>%
group_by(labs) %>%
summarise(mean_comp = mean(comp6)) %>%
print(n=27)
selectedTypes <- c("pDC", "Prog_RBC")
lvls <- c("other", selectedTypes)
manualCols <- c("gray", "red", "blue")
labs <- bmmc$celltype.l2 %>% as.character()
labs[!(labs %in% selectedTypes)] <- "other"
labs <- factor(labs, levels = lvls)
plot_dat <- pc_score %>%
as.data.frame() %>%
mutate(labs = labs) %>%
arrange(labs)
outPlots <- matrixPlot(plot_dat, comp_idx = 1:5, groupKey = "labs", manualCol = manualCols)
# UMAP again
umap_res <- umap(pc_score %>% as.data.frame() %>% select(comp1:comp20))
umap_score <- umap_res$layout
colnames(umap_score) <- paste0("comp", 1:ncol(umap_score))
umap_score %>%
as.data.frame() %>%
mutate(labs = bmmc$celltype.l2) %>%
ggplot(aes(x = comp1, y = comp2)) +
geom_point(aes(colour = labs))
p1 <-
pc_score %>%
as.data.frame() %>%
mutate(labs = bmmc$celltype.l2) %>%
ggplot(aes(x = comp1, y = comp2)) +
geom_point(aes(colour = labs), alpha = 1, stroke = NA, size = 3)
p2 <-
umap_score %>%
as.data.frame() %>%
mutate(labs = bmmc$celltype.l2) %>%
ggplot(aes(x = comp1, y = comp2)) +
geom_point(aes(colour = labs), alpha = 1, stroke = NA, size = 3)
ggarrange(p1, p2, common.legend = T)
## Set working directory
setwd("~/Documents/GitHub/BINF90004_SingleCell/Practical")
## Load necessary packages & functions
source("loadPkgs.R")
source("Viz.R")
## Prepare query single cell BMMC
if(T){
# Install data (only need to install once)
if(F){
AvailableData()
InstallData("bmcite")
}
# Update old Seurat obj after updating Seurat pkg
bmmc <- UpdateSeuratObject(object = bmcite)
# Subset 10% of cells to reduce computation
table(bmmc$celltype.l2)
celltypes <- bmmc$celltype.l2 %>% unique()
toKeepIdx <- c()
set.seed(9048)
for(i in 1:length(celltypes)){
ctype <- celltypes[i]
idx <- which(bmmc$celltype.l2 == ctype)
keepHowMany <- max(round(length(idx)*0.1), 1)
idx <- sample(idx, keepHowMany)
toKeepIdx <- c(toKeepIdx, idx)
}
bmmc <- bmmc[,toKeepIdx]
# Simple QC
feat2keep <- rownames(bmmc)[rowMeans(bmmc[["RNA"]]$counts == 0) < 1]
bmmc <- bmmc[feat2keep,]
# Convert Seurat obj to sce
bmmc <- SingleCellExperiment(
list(counts = bmmc[["RNA"]]$counts),
colData = bmmc@meta.data
)
# Scran norm
set.seed(5202056)
bmmc <- computeSumFactors(bmmc, cluster=quickCluster(bmmc))
bmmc <- logNormCounts(bmmc)
}
query <- bmmc
rm(bmmc); gc()
## Prepare reference data (stored in celldex)
reference <- MonacoImmuneData()
## Common genes and rank transform
commonGenes <- intersect(rownames(reference), rownames(query))
length(commonGenes)
reference <- reference[commonGenes, ]
query <- query[commonGenes, ]
### SingleR -------------------------------------------------------------------
singleRassay <- "logcounts"
YtrainName <- "label.main"
sr_train <- trainSingleR(assay(reference, singleRassay),
labels = colData(reference)[, YtrainName])
sr_re <- classifySingleR(assay(query, singleRassay),
sr_train,
fine.tune = T)
# Heatmap of annotation resutls
plotScoreHeatmap(sr_re)
# Store the annotations
query$SingleR_main <- sr_re$labels
YtrainName <- "label.fine"
sr_train <- trainSingleR(assay(reference, singleRassay),
labels = colData(reference)[, YtrainName])
sr_re <- classifySingleR(assay(query, singleRassay),
sr_train,
fine.tune = T)
# Heatmap of annotation resutls
plotScoreHeatmap(sr_re)
# Heatmap of annotation resutls
plotScoreHeatmap(sr_re)
# Store the annotations
query$SingleR_fine <- sr_re$labels
# Compare original labels and SingleR annotations
plotSankey(query$SingleR_main, query$celltype.l1)
plotSankey(query$SingleR_fine, query$celltype.l2)
# Diagnoistics
plotDeltaDistribution(sr_re)
